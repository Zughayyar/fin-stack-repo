name: finstack_app

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: finstack_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-passw0rd}
      POSTGRES_DB: ${POSTGRES_DB:-finstack}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-finstack}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - finstack-network

  # API Server
  server:
    profiles:
      - with-server
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: finstack_api
    restart: unless-stopped
    init: true
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-passw0rd}@postgres:5432/${POSTGRES_DB:-finstack}
      - SERVER_URL=0.0.0.0:8080
      - RUST_LOG=${RUST_LOG:-info}
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-passw0rd}
      - POSTGRES_DB=${POSTGRES_DB:-finstack}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - finstack-network
    volumes:
      - ./logs:/app/logs:rw

  # Angular Frontend
  frontend:
    profiles:
      - with-frontend
      - with-server
    build:
      context: ../Web
      dockerfile: Dockerfile
      target: runtime
    container_name: finstack_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - finstack-network

  # Nginx Reverse Proxy
  nginx:
    profiles:
      - with-server
      - with-nginx
    image: nginx:alpine
    container_name: finstack_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      server:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - finstack-network

  # Database Administration (optional)
  pgadmin:
    profiles:
      - with-pgadmin
    image: dpage/pgadmin4:latest
    container_name: finstack_pgadmin
    restart: unless-stopped
    ports:
      - "8081:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@finstack.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - finstack-network

networks:
  finstack-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local 